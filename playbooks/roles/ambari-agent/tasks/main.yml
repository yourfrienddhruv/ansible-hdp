---
- name: Load OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Download the Ambari repo
  get_url: url={{ ambari_repo }} dest={{ ambari_repo_file }}

- name: Add apt key
  apt_key: keyserver=keyserver.ubuntu.com id={{ ambari_repo_key }}
  when: ansible_os_family == "Debian"

- name: Ensure required packages are installed (yum)
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
    - ambari-agent
  notify: Reload systemd
  when: ansible_os_family == "RedHat"

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
    - ambari-agent
  when: ansible_os_family == "Debian"

- include: unbound-dns.yml
  when: use_dns

- name: Configure the Ambari agent
  lineinfile: dest=/etc/ambari-agent/conf/ambari-agent.ini
              regexp='^hostname\s*='
              line='hostname={{ hostvars[groups['ambari-node'][0]]['ansible_nodename'] }}'
              state=present
  notify: Restart ambari-agent

- name: Configure the Ambari run_as_user
  lineinfile: dest=/etc/ambari-agent/conf/ambari-agent.ini
              regexp='^run_as_user\s*='
              line='run_as_user=ambari'
              state=present
  notify: Restart ambari-agent

- name: Ensure OS Group for Ambari Agent service
  group:
    name: ambari

- name: Ensure OS user for Ambari Agent service
  user:
    name: ambari
    shell: /bin/bash
    groups: ambari

- name: Configure Sudoers for Ambari Agent service
  template: src=sudoers.j2 dest=/etc/sudoers.d/ambari
  notify: Restart ambari-agent

- meta: flush_handlers

- name: Make sure ambari-agent is running
  service: name=ambari-agent state=started enabled=yes

{
  "configurations" : [
    {
      "core-site": {
        {% if hdfs.ha_namenode -%}
        "fs.defaultFS" : "hdfs://{{ cluster_name }}",
        "ha.zookeeper.quorum" : "%HOSTGROUP::masternode_1%:2181,%HOSTGROUP::masternode_2%:2181,%HOSTGROUP::masternode_3%:2181",
        "hadoop.proxyuser.httpfs.groups" : "*",
        "hadoop.proxyuser.httpfs.hosts" : "*",
        {% endif -%}
        "hadoop.proxyuser.hcat.groups" : "*",
        "hadoop.proxyuser.hcat.hosts" : "*",
        "hadoop.proxyuser.hue.groups" : "*",
        "hadoop.proxyuser.hue.hosts" : "*",
        "fs.trash.interval" : "4320"
      }
    },
    {% if hostvars[groups['master-nodes'][0]]['ansible_memtotal_mb'] > 89000 -%}
    {
      "zoo.cfg" : {
        "properties_attributes" : { },
        "properties" : {
          "dataDir" : "{% for disk in hostvars[groups['master-nodes'][0]]['ansible_mounts'] if disk.mount | match("/hadoop/ms/*") %}/hadoop/ms/zookeeper{% if not loop.last %},{% endif %}{% else %}/hadoop/zookeeper{%- endfor %}"
        }
      }
    },
    {
      "ams-hbase-env" : {
        "regionserver_xmn_size" : "512m",
        "hbase_regionserver_heapsize" : "4096m",
        "hbase_master_heapsize" : "4096m",
        "hbase_master_xmn_size" : "512m"
      }
    },
    {
      "ams-env" : {
        "metrics_collector_heapsize" : "4096m"
      }
    },
    {
      "hadoop-env" : {
        "namenode_heapsize" : "8192m",
        "namenode_opt_maxnewsize" : "512m",
        "namenode_opt_newsize" : "512m"
      }
    },
    {% elif hostvars[groups['master-nodes'][0]]['ansible_memtotal_mb'] > 24000 -%}
    {
      "ams-hbase-env" : {
        "regionserver_xmn_size" : "512m",
        "hbase_regionserver_heapsize" : "2048m",
        "hbase_master_heapsize" : "2048m",
        "hbase_master_xmn_size" : "512m"
      }
    },
    {
      "ams-env" : {
        "metrics_collector_heapsize" : "2048m"
      }
    },
    {
      "hadoop-env" : {
        "namenode_heapsize" : "4096m",
        "namenode_opt_maxnewsize" : "512m",
        "namenode_opt_newsize" : "512m"
      }
    },
    {% elif hostvars[groups['master-nodes'][0]]['ansible_memtotal_mb'] > 10000 -%}
    {
      "ams-hbase-env" : {
        "regionserver_xmn_size" : "384m",
        "hbase_regionserver_heapsize" : "1024m",
        "hbase_master_heapsize" : "1024m",
        "hbase_master_xmn_size" : "384m"
      }
    },
    {
      "ams-env" : {
        "metrics_collector_heapsize" : "1024m"
      }
    },
    {% endif -%}
    {
      "hdfs-site" : {
        {% if hdfs.ha_namenode -%}
        "dfs.client.failover.proxy.provider.{{ cluster_name }}" : "org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider",
        "dfs.ha.automatic-failover.enabled" : "true",
        "dfs.ha.fencing.methods" : "shell(/bin/true)",
        "dfs.ha.namenodes.{{ cluster_name }}" : "nn1,nn2",
        "dfs.namenode.http-address.{{ cluster_name }}.nn1" : "%HOSTGROUP::masternode_1%:50070",
        "dfs.namenode.http-address.{{ cluster_name }}.nn2" : "%HOSTGROUP::masternode_2%:50070",
        "dfs.namenode.https-address.{{ cluster_name }}.nn1" : "%HOSTGROUP::masternode_1%:50470",
        "dfs.namenode.https-address.{{ cluster_name }}.nn2" : "%HOSTGROUP::masternode_2%:50470",
        "dfs.namenode.rpc-address.{{ cluster_name }}.nn1" : "%HOSTGROUP::masternode_1%:8020",
        "dfs.namenode.rpc-address.{{ cluster_name }}.nn2" : "%HOSTGROUP::masternode_2%:8020",
        "dfs.namenode.shared.edits.dir" : "qjournal://%HOSTGROUP::masternode_1%:8485;%HOSTGROUP::masternode_2%:8485;%HOSTGROUP::masternode_3%:8485/{{ cluster_name }}",
        "dfs.nameservices" : "{{ cluster_name }}",
        {% endif -%}
        "dfs.datanode.data.dir" : "{% for disk in hostvars[groups['slave-nodes'][0]]['ansible_mounts'] if disk.mount | match("/grid/*") %}{{ disk.mount }}/hadoop/hdfs/data{% if not loop.last %},{% endif %}{% else %}/hadoop/hdfs/data{%- endfor %}",
        {% if hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] > 59000 -%}
        "dfs.datanode.balance.bandwidthPerSec" : "12500000",
        "dfs.datanode.max.transfer.threads": "4096",
        {% endif -%}
        "dfs.journalnode.edits.dir": "{% for disk in hostvars[groups['master-nodes'][0]]['ansible_mounts'] if disk.mount | match("/hadoop/nn/*") %}/hadoop/nn/hdfs/journalnode{% if not loop.last %},{% endif %}{% else %}/hadoop/hdfs/journalnode{%- endfor %}",
        "dfs.namenode.checkpoint.dir": "{% for disk in hostvars[groups['master-nodes'][0]]['ansible_mounts'] if disk.mount | match("/hadoop/nn/*") %}/hadoop/nn/hdfs/namenodesecondary{% if not loop.last %},{% endif %}{% else %}/hadoop/hdfs/namenodesecondary{%- endfor %}",
        "dfs.namenode.name.dir": "{% for disk in hostvars[groups['master-nodes'][0]]['ansible_mounts'] if disk.mount | match("/hadoop/nn/*") %}/hadoop/nn/hdfs/namenode{% if not loop.last %},{% endif %}{% else %}/hadoop/hdfs/namenode{%- endfor %}",
        "dfs.datanode.failed.volumes.tolerated" : "{% for disk in hostvars[groups['slave-nodes'][0]]['ansible_mounts'] if disk.mount | match("/grid/*") %}{% if loop.last %}{% if loop.index > 1 %}{{ hdfs.failed_volumes_tolerated }}{% else %}0{% endif %}{% endif %}{% else %}0{%- endfor %}",
        "dfs.replication" : "{{ hdfs.dfs_replication }}"
      }
    },
    {% if hdfs.ha_namenode -%}
    {
      "zoo.cfg" : {
        "properties_attributes" : { },
        "properties" : {
          "dataDir" : "{% for disk in hostvars[groups['master-nodes'][0]]['ansible_mounts'] if disk.mount | match("/hadoop/ms/*") %}/hadoop/ms/zookeeper{% if not loop.last %},{% endif %}{% else %}/hadoop/zookeeper{%- endfor %}"
        }
      }
    },
    {% endif -%}
    {% if hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] > 119000 -%}
    {
      "hadoop-env" : {
        "dtnode_heapsize" : "4096m"
      }
    },
    {
      "yarn-site" : {
        "yarn.nodemanager.resource.memory-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//6)//4096)*4096 }}",
        "yarn.scheduler.maximum-allocation-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - 8192 - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//6)//4096)*4096 }}",
        "yarn.scheduler.minimum-allocation-mb" : "4096",
        "yarn.timeline-service.store-class" : "org.apache.hadoop.yarn.server.timeline.RollingLevelDBTimelineStore",
        "yarn.timeline-service.generic-application-history.save-non-am-container-meta-info" : "false"
      }
    },
    {
      "mapred-site" : {
        "mapreduce.map.java.opts" : "-Xmx6553m",
        "mapreduce.map.memory.mb" : "8192",
        "mapreduce.reduce.java.opts" : "-Xmx6553m",
        "mapreduce.reduce.memory.mb" : "8192",
        "mapreduce.task.io.sort.mb" : "2047",
        "mapreduce.output.fileoutputformat.compress" : "true",
        "mapreduce.map.output.compress" : "true",
        "yarn.app.mapreduce.am.command-opts" : "-Xmx3276m -Dhdp.version=${hdp.version}",
        "yarn.app.mapreduce.am.resource.mb" : "4096",
        "mapreduce.job.reduce.slowstart.completedmaps" : "0.7"
      }
    },
    {
      "zeppelin-config" : {
        "properties_attributes" : { },
        "properties" : {
          "zeppelin.notebook.dir" : "notebook",
          "zeppelin.ssl.keystore.type" : "JKS",
          "zeppelin.ssl.truststore.path" : "conf/truststore",
          "zeppelin.websocket.max.text.message.size" : "1024000",
          "zeppelin.notebook.homescreen.hide" : "false",
          "zeppelin.server.port" : "9995",
          "zeppelin.ssl" : "false",
          "zeppelin.notebook.homescreen" : " ",
          "zeppelin.notebook.storage" : "org.apache.zeppelin.notebook.repo.VFSNotebookRepo",
          "zeppelin.interpreter.connect.timeout" : "30000",
          "zeppelin.anonymous.allowed" : "true",
          "zeppelin.interpreter.dir" : "interpreter",
          "zeppelin.ssl.truststore.type" : "JKS",
          "zeppelin.ssl.keystore.path" : "conf/keystore",
          "zeppelin.notebook.s3.bucket" : "zeppelin",
          "zeppelin.server.allowed.origins" : "*",
          "zeppelin.server.addr" : "0.0.0.0",
          "zeppelin.ssl.client.auth" : "false"
        }
      }
    },
    {
      "zeppelin-env" : {
        "properties_attributes" : { },
        "properties" : {
          "zeppelin.spark.jar.dir" : "/apps/zeppelin",
          "zeppelin.executor.mem" : "512m",
          "zeppelin.server.kerberos.keytab" : "",
          "zeppelin_log_dir" : "/var/log/zeppelin",
          "zeppelin.executor.instances" : "2",
          "zeppelin.server.kerberos.principal" : "",
          "zeppelin_user" : "zeppelin",
          "zeppelin_pid_dir" : "/var/run/zeppelin",
          "zeppelin_group" : "zeppelin"
        }
      }
    },
    {% elif hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] > 59000 -%}
    {
      "hadoop-env" : {
        "dtnode_heapsize" : "2048m"
      }
    },
    {
      "yarn-site" : {
        "yarn.nodemanager.resource.memory-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//8)//4096)*4096 }}",
        "yarn.scheduler.maximum-allocation-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - 4096 - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//8)//4096)*4096 }}",
        "yarn.scheduler.minimum-allocation-mb" : "4096"
      }
    },
    {
      "mapred-site" : {
        "mapreduce.map.java.opts" : "-Xmx3276m",
        "mapreduce.map.memory.mb" : "4096",
        "mapreduce.reduce.java.opts" : "-Xmx3276m",
        "mapreduce.reduce.memory.mb" : "4096",
        "mapreduce.task.io.sort.mb" : "1536",
        "yarn.app.mapreduce.am.command-opts" : "-Xmx3276m -Dhdp.version=${hdp.version}",
        "yarn.app.mapreduce.am.resource.mb" : "4096"
      }
    },
    {% elif hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] > 24000 -%}
    {
      "hadoop-env" : {
        "dtnode_heapsize" : "1024m"
      }
    },
    {
      "yarn-site" : {
        "yarn.nodemanager.resource.memory-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//8)//2048)*2048 }}",
        "yarn.scheduler.maximum-allocation-mb" : "{{ ((hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb'] - 2048 - hostvars[groups['slave-nodes'][0]]['ansible_memtotal_mb']//8)//2048)*2048 }}",
        "yarn.scheduler.minimum-allocation-mb" : "2048"
      }
    },
    {
      "mapred-site" : {
        "mapreduce.map.java.opts" : "-Xmx1638m",
        "mapreduce.map.memory.mb" : "2048",
        "mapreduce.reduce.java.opts" : "-Xmx1638m",
        "mapreduce.reduce.memory.mb" : "2048",
        "mapreduce.task.io.sort.mb" : "768",
        "yarn.app.mapreduce.am.command-opts" : "-Xmx1638m -Dhdp.version=${hdp.version}",
        "yarn.app.mapreduce.am.resource.mb" : "2048"
      }
    },
    {% endif -%}
    {
      "yarn-site" : {
        "yarn.nodemanager.local-dirs" : "{% for disk in hostvars[groups['slave-nodes'][0]]['ansible_mounts'] if disk.mount | match("/grid/*") %}{{ disk.mount }}/hadoop/yarn/local{% if not loop.last %},{% endif %}{% else %}/hadoop/yarn/local{%- endfor %}",
        "yarn.nodemanager.log-dirs" : "{% for disk in hostvars[groups['slave-nodes'][0]]['ansible_mounts'] if disk.mount | match("/grid/*") %}{{ disk.mount }}/hadoop/yarn/log{% if not loop.last %},{% endif %}{% else %}/hadoop/yarn/log{%- endfor %}"
      }
    },
    {
      "kafka-broker" : {
        "log.dirs" : "/hadoop/kafka-logs"
      }
    }
  ],
  "host_groups" : [
    {
      "name" : "masternode_1",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {% if hdfs.ha_namenode -%}
        {
          "name" : "JOURNALNODE"
        },
        {
          "name" : "ZKFC"
        },
        {% endif -%}
        {
          "name" : "NAMENODE"
        },
        {% if install_flume == true -%}
        {
          "name" : "FLUME_HANDLER"
        },
        {% endif -%}
        {% if install_kafka == true -%}
        {
          "name" : "KAFKA_BROKER"
        },
        {% endif -%}
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "LOGSEARCH_LOGFEEDER"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "cardinality" : "1"
    },
    {
      "name" : "slavenode_simple",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "NODEMANAGER"
        },
        {
          "name" : "DATANODE"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "LOGSEARCH_LOGFEEDER"
        },
        {
           "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "cardinality" : "{{ groups['slave-nodes']|length }}"
    },
    {
      "name" : "masternode_3",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {% if install_kafka == true -%}
        { 
          "name" : "KAFKA_BROKER"
        },
        {% endif -%}
        {% if install_zeppelin == true -%}
        {
          "name" : "ZEPPELIN_MASTER"
        },
        {% endif -%}
        {
          "name" : "AMBARI_SERVER"
        },
        {
          "name" : "METRICS_COLLECTOR"
        },
        {
          "name" : "METRICS_GRAFANA"
        },
        {
          "name" : "INFRA_SOLR_CLIENT"
        },
        {
          "name" : "INFRA_SOLR"
        },
        {
          "name" : "LOGSEARCH_SERVER"
        },
        {% if hdfs.ha_namenode -%}
        {
          "name" : "JOURNALNODE"
        },
        {% endif -%}
        {% if install_flume == true -%}
        {
          "name" : "FLUME_HANDLER"
        },
        {% endif -%}
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "LOGSEARCH_LOGFEEDER"
        },
        {
           "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "cardinality" : "1"
    },
    {% if 'edge-nodes' in groups and groups['edge-nodes']|length > 0 -%}
    {
      "name" : "edgenode",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {% if install_flume == true -%}
        {
          "name" : "FLUME_HANDLER"
        },
        {% endif -%}
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "LOGSEARCH_LOGFEEDER"
        },
        {
           "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "cardinality" : "{{ groups['edge-nodes']|length }}"
    },
    {% endif -%}
    {
      "name" : "masternode_2",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {% if install_kafka == true -%}
        {
          "name" : "KAFKA_BROKER"
        },
        {% endif -%}
        {
          "name" : "HISTORYSERVER"
        },
        {% if hdfs.ha_namenode -%}
        {
          "name" : "JOURNALNODE"
        },
        {
          "name" : "ZKFC"
        },
        {
          "name" : "NAMENODE"
        },
        {% else %}
        {
          "name" : "SECONDARY_NAMENODE"
        },
        {% endif -%}
        {% if install_flume == true -%}
        {
          "name" : "FLUME_HANDLER"
        },
        {% endif -%}
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "LOGSEARCH_LOGFEEDER"
        },
        {
          "name" : "APP_TIMELINE_SERVER"
        },
        {
          "name" : "RESOURCEMANAGER"
        },
        {
           "name" : "ZOOKEEPER_CLIENT"
        }
      ],
      "cardinality" : "1"
    }
  ],
  "Blueprints" : {
    "stack_name" : "HDP",
    "stack_version" : "{{ hdp_version }}"
  }
}
